name: Terraform Apply
on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "apply" to confirm'
        required: true
        default: ''

jobs:
  terraform:
    runs-on: ubuntu-latest
    if: github.event.inputs.confirm == 'apply'
    
    defaults:
      run:
        working-directory: ./terraform
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_github_repo: RommelEs/SitioWebEstatico
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: '1.6.6'
    
    - name: Terraform Init
      run: terraform init
    
    - name: Terraform Format
      run: terraform fmt
    
    - name: Terraform Validate
      run: terraform validate
    
    - name: Terraform Plan
      run: terraform plan -out=tfplan
    
    - name: Show Terraform Plan
      run: terraform show tfplan
    
    - name: Terraform Apply
      if: github.event.inputs.confirm == 'apply'
      run: terraform apply -auto-approve tfplan
    
    - name: Get Storage Account Info
      id: storage_info
      run: |
        STORAGE_ACCOUNT=$(terraform output -raw screenshots_storage_account_name)
        STORAGE_KEY=$(terraform output -raw screenshots_storage_account_primary_access_key)
        echo "::add-mask::$STORAGE_KEY"
        echo "storage_account=$STORAGE_ACCOUNT" >> $GITHUB_OUTPUT
        echo "storage_key=$STORAGE_KEY" >> $GITHUB_OUTPUT
    
    - name: Install Azure CLI
      run: |
        curl -sL https://aka.ms/InstallAzureCLIDeb | sudo bash
    
    - name: Upload Screenshots to Storage
      if: hashFiles('website/*.png') != '' || hashFiles('website/*.jpg') != ''
      run: |
        # Subir archivos PNG desde website/
        if ls ../website/*.png 1> /dev/null 2>&1; then
          az storage blob upload-batch \
            --account-name ${{ steps.storage_info.outputs.storage_account }} \
            --account-key ${{ steps.storage_info.outputs.storage_key }} \
            --destination screenshots \
            --source ../website/ \
            --pattern "*.png" \
            --overwrite
        fi
        
        # Subir archivos JPG desde website/
        if ls ../website/*.jpg 1> /dev/null 2>&1; then
          az storage blob upload-batch \
            --account-name ${{ steps.storage_info.outputs.storage_account }} \
            --account-key ${{ steps.storage_info.outputs.storage_key }} \
            --destination screenshots \
            --source ../website/ \
            --pattern "*.jpg" \
            --overwrite
        fi