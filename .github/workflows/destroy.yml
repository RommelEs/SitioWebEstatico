name: Terraform Destroy Infrastructure

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'development'
        type: choice
        options:
          - development
          - staging
          - production
      confirm_destroy:
        description: 'Type "DESTROY" to confirm'
        required: true
        type: string

jobs:
  destroy:
    runs-on: ubuntu-latest
    
    defaults:
      run:
        working-directory: ./terraform
    
    env:
      ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
      ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
      ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
      ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_app_client_id: ${{ secrets.AZURE_CLIENT_ID }}
      TF_VAR_tenant_id: ${{ secrets.AZURE_TENANT_ID }}
      TF_VAR_github_repo: RommelEs/SitioWebEstatico
    
    steps:
    - name: Validate execution context
      run: |
        echo "üö® INFRASTRUCTURE DESTROY REQUESTED"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Requested by: ${{ github.actor }}"
        echo "Repository: ${{ github.repository }}"
        
        # Validate confirmation input
        if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
          echo "‚ùå Confirmation failed. You must type 'DESTROY' exactly."
          exit 1
        fi
        
        echo "‚úÖ Confirmation validated"

    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: '{"clientId":"${{ secrets.AZURE_CLIENT_ID }}","clientSecret":"${{ secrets.AZURE_CLIENT_SECRET }}","subscriptionId":"${{ secrets.AZURE_SUBSCRIPTION_ID }}","tenantId":"${{ secrets.AZURE_TENANT_ID }}"}'

    - name: Verify Azure connection
      run: |
        echo "üîç Verifying Azure connection..."
        az account show
        az account list --output table

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 'latest'
        terraform_wrapper: false

    - name: Verify Terraform installation
      run: |
        echo "üîç Verifying Terraform installation..."
        terraform version

    - name: Terraform Init
      run: |
        echo "üîß Initializing Terraform..."
        terraform init
        
    - name: Terraform Validate
      run: |
        echo "‚úÖ Validating Terraform configuration..."
        terraform validate

    - name: Check current state
      run: |
        echo "üîç Checking current Terraform state..."
        terraform show
        echo ""
        echo "üìã Resources in state:"
        terraform state list

    - name: Generate and show destroy plan
      run: |
        echo "üìã Generating destroy plan..."
        terraform plan -destroy -out=destroy.tfplan
        echo ""
        echo "üö® RESOURCES TO BE DESTROYED:"
        terraform show destroy.tfplan

    - name: Final confirmation and delay
      run: |
        echo "‚ö†Ô∏è  FINAL WARNING: This will destroy all infrastructure!"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Waiting 30 seconds before proceeding..."
        sleep 30
        echo "üöÄ Proceeding with destruction..."

    - name: Terraform Destroy
      run: |
        echo "üí• Executing Terraform destroy..."
        terraform apply -auto-approve destroy.tfplan
        
    - name: Verify destruction completion
      run: |
        echo "üîç Verifying destruction completion..."
        terraform state list || echo "‚úÖ State is empty - destruction completed"

    - name: Final success confirmation
      run: |
        echo "‚úÖ INFRASTRUCTURE DESTROY COMPLETED SUCCESSFULLY"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Destroyed by: ${{ github.actor }}"
        echo "Timestamp: $(date)"

    - name: Cleanup and diagnostics on failure
      if: failure()
      run: |
        echo "‚ùå DESTROY PROCESS FAILED"
        echo "üîç Performing failure diagnostics..."
        
        echo "Current Terraform state:"
        terraform state list || echo "Unable to list state"
        
        echo ""
        echo "Resources still in state:"
        terraform show || echo "Unable to show state"
        
        echo ""
        echo "üí° RECOVERY SUGGESTIONS:"
        echo "1. Check the logs above for specific error messages"
        echo "2. Manually review Azure portal for stuck resources"
        echo "3. Run individual 'terraform destroy -target=RESOURCE' for problematic resources"
        echo "4. Contact team if persistent issues occur"

    - name: Upload failure diagnostics
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: destroy-failure-diagnostics-${{ github.event.inputs.environment }}-${{ github.run_id }}
        path: |
          terraform/terraform.tfstate*
          terraform/.terraform/
          terraform/destroy.tfplan
        retention-days: 30