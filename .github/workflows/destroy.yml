name: Terraform Destroy

on:
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type "destroy" to confirm deletion of all resources'
        required: true
        default: ''
      environment:
        description: 'Environment to destroy'
        required: true
        type: choice
        options:
          - development
          - staging  
          - production
        default: 'development'
      skip_plan:
        description: 'Skip destroy plan preview (faster execution)'
        type: boolean
        default: false
      force_unlock:
        description: 'Force unlock Terraform state if locked'
        type: boolean
        default: false

env:
  TF_IN_AUTOMATION: true
  TF_LOG_PROVIDER: WARN  # Reduce logs verbosity

jobs:
  destroy:
    runs-on: ubuntu-latest
    timeout-minutes: 45  # Aumentado para operaciones complejas
    
    # Validaciones más estrictas
    if: |
      github.event.inputs.confirm == 'destroy' && 
      github.actor != '' &&
      contains(fromJSON('["development", "staging", "production"]'), github.event.inputs.environment)
    
    defaults:
      run:
        working-directory: ./terraform
    
    # Configurar entorno específico
    environment: 
      name: ${{ github.event.inputs.environment }}
      url: https://portal.azure.com
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 1  # Solo último commit para destroy
    
    - name: Validate execution context
      run: |
        echo "🔍 Validating execution context..."
        echo "Repository: ${{ github.repository }}"
        echo "Actor: ${{ github.actor }}"
        echo "Environment: ${{ github.event.inputs.environment }}"
        echo "Ref: ${{ github.ref }}"
        
        # Prevenir ejecución accidental en production
        if [[ "${{ github.event.inputs.environment }}" == "production" && "${{ github.ref }}" != "refs/heads/main" ]]; then
          echo "❌ Production destroy only allowed from main branch"
          exit 1
        fi
    
    - name: Azure Login
      uses: azure/login@v2
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
        enable-AzPSSession: false
    
    - name: Verify Azure connection
      run: |
        echo "🔗 Verifying Azure connection..."
        az account show --output table
        az group list --query "[?starts_with(name, 'rg-')] | [0:3]" --output table || true
    
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ~1.9.0  # Pin a version específica
        terraform_wrapper: false   # Para mejor output parsing
    
    - name: Cache Terraform providers
      uses: actions/cache@v4
      with:
        path: |
          ~/.terraform.d/plugin-cache
          .terraform/providers
        key: terraform-providers-${{ runner.os }}-${{ hashFiles('**/.terraform.lock.hcl') }}
        restore-keys: |
          terraform-providers-${{ runner.os }}-
    
    - name: Terraform Init
      run: |
        echo "🚀 Initializing Terraform..."
        terraform init \
          -input=false \
          -backend-config="resource_group_name=${{ secrets.TF_STATE_RESOURCE_GROUP }}" \
          -backend-config="storage_account_name=${{ secrets.TF_STATE_STORAGE_ACCOUNT }}" \
          -backend-config="container_name=${{ secrets.TF_STATE_CONTAINER }}" \
          -backend-config="key=${{ github.event.inputs.environment }}.tfstate"
      timeout-minutes: 10
    
    - name: Handle state lock (conditional)
      if: github.event.inputs.force_unlock == 'true'
      run: |
        echo "🔓 Force unlocking Terraform state..."
        terraform force-unlock -force ${{ secrets.TF_LOCK_ID }} || true
      continue-on-error: true
      timeout-minutes: 2
    
    - name: Terraform Validate
      run: |
        echo "✅ Validating Terraform configuration..."
        terraform validate
        terraform fmt -check=true || echo "⚠️ Code formatting issues detected"
      timeout-minutes: 3
    
    - name: Check current state
      run: |
        echo "📋 Checking current infrastructure state..."
        terraform show -json | jq -r '.values.root_module.resources[]?.address // empty' | head -10 || echo "No resources found"
        echo "Total resources: $(terraform state list | wc -l)"
      continue-on-error: true
      timeout-minutes: 5
    
    - name: Generate and show destroy plan
      if: github.event.inputs.skip_plan != 'true'
      run: |
        echo "🔍 Generating destroy plan..."
        terraform plan -destroy \
          -var-file="${{ github.event.inputs.environment }}.tfvars" \
          -lock=false \
          -input=false \
          -compact-warnings \
          -no-color \
          -out=destroy.tfplan
        
        echo "📊 Destroy plan summary:"
        terraform show -json destroy.tfplan | jq -r '.resource_changes[]? | select(.change.actions[] == "delete") | .address' | wc -l | xargs echo "Resources to destroy:"
      continue-on-error: true
      timeout-minutes: 10
    
    - name: Final confirmation and delay
      run: |
        echo "⚠️  FINAL CONFIRMATION - ABOUT TO DESTROY ALL RESOURCES"
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "👤 Initiated by: ${{ github.actor }}"
        echo "📅 Repository: ${{ github.repository }}"
        echo "🔗 Run URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        echo "⏰ Timestamp: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo ""
        
        if [ "${{ github.event.inputs.skip_plan }}" == "true" ]; then
          echo "⚡ Plan preview was skipped - DESTROYING WITHOUT PREVIEW"
        fi
        
        echo "🔥 Proceeding with IRREVERSIBLE destruction in 10 seconds..."
        for i in {10..1}; do
          echo "Destroying in $i seconds..."
          sleep 1
        done
        echo "🚀 Starting destruction NOW!"
    
    - name: Terraform Destroy
      run: |
        echo "🔥 Starting resource destruction..."
        terraform destroy -auto-approve \
          -var-file="${{ github.event.inputs.environment }}.tfvars" \
          -input=false \
          -lock-timeout=10m \
          -parallelism=5 \
          -refresh=true
      timeout-minutes: 25
    
    - name: Verify destruction completion
      run: |
        echo "🔍 Verifying destruction completion..."
        
        # Check if any resources remain
        remaining_resources=$(terraform state list | wc -l)
        echo "Remaining resources in state: $remaining_resources"
        
        if [ $remaining_resources -gt 0 ]; then
          echo "⚠️ Some resources may still exist:"
          terraform state list
        else
          echo "✅ All resources successfully removed from state"
        fi
        
        # Check Azure resources (optional)
        echo "🔍 Checking for remaining Azure resources..."
        az resource list --resource-group "rg-${{ github.event.inputs.environment }}-*" --output table || echo "No resource groups found"
      continue-on-error: true
      timeout-minutes: 5
    
    - name: Final success confirmation
      run: |
        echo "🎉 DESTRUCTION COMPLETED SUCCESSFULLY"
        echo "🌍 Environment: ${{ github.event.inputs.environment }}"
        echo "👤 Destroyed by: ${{ github.actor }}"
        echo "⏰ Completed at: $(date -u '+%Y-%m-%d %H:%M:%S UTC')"
        echo "🔗 Run details: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}"
        
        # Notify via webhook if configured
        if [ -n "${{ secrets.TEAMS_WEBHOOK_URL }}" ]; then
          curl -X POST "${{ secrets.TEAMS_WEBHOOK_URL }}" \
            -H "Content-Type: application/json" \
            -d "{\"text\":\"✅ Terraform Destroy completed for ${{ github.event.inputs.environment }} by ${{ github.actor }}\"}" || true
        fi
    
    - name: Cleanup and diagnostics on failure
      if: failure()
      run: |
        echo "❌ DESTROY PROCESS FAILED"
        echo "🔍 Performing failure diagnostics..."
        
        # Show current state
        echo "Current Terraform state:"
        terraform show || true
        
        # Show any remaining resources
        echo "Resources still in state:"
        terraform state list || true
        
        # Check for locks
        echo "Checking for state locks..."
        terraform init -input=false > /dev/null 2>&1 || echo "Init failed - possible lock"
        
        # Azure resource check
        echo "Checking Azure resources:"
        az resource list --output table | head -20 || true
        
        echo ""
        echo "💡 RECOVERY SUGGESTIONS:"
        echo "1. Check the logs above for specific error messages"
        echo "2. Manually review Azure portal for stuck resources"
        echo "3. Consider using 'force_unlock' option if state is locked"
        echo "4. Run individual 'terraform destroy -target=RESOURCE' for problematic resources"
        echo "5. Contact team if persistent issues occur"
        
        # Save diagnostic info
        {
          echo "Failure diagnostics for run ${{ github.run_id }}"
          echo "Environment: ${{ github.event.inputs.environment }}"
          echo "Actor: ${{ github.actor }}"
          echo "Timestamp: $(date)"
          terraform state list 2>/dev/null || echo "Could not list state"
        } > destroy_failure_diagnostics.txt || true
      continue-on-error: true
    
    - name: Upload failure diagnostics
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: destroy-failure-diagnostics-${{ github.event.inputs.environment }}-${{ github.run_id }}
        path: terraform/destroy_failure_diagnostics.txt
        retention-days: 30
      continue-on-error: true