name: 'Terraform Destroy'

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to destroy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      confirm_destroy:
        description: 'Type "DESTROY" to confirm deletion'
        required: true
        type: string

env:
  TF_VERSION: '1.6.0'
  TF_VAR_environment: ${{ github.event.inputs.environment }}
  ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}

jobs:
  terraform-destroy:
    name: 'Terraform Destroy'
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment }}
    
    # Protecci√≥n adicional - solo permitir en branches espec√≠ficos
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
    - name: Validate destroy confirmation
      run: |
        if [ "${{ github.event.inputs.confirm_destroy }}" != "DESTROY" ]; then
          echo "‚ùå Destroy confirmation failed. You must type 'DESTROY' to proceed."
          exit 1
        fi
        echo "‚úÖ Destroy confirmation validated"

    - name: Checkout
      uses: actions/checkout@v4

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TF_VERSION }}

    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: |
          {
            "clientId": "${{ secrets.AZURE_CLIENT_ID }}",
            "clientSecret": "${{ secrets.AZURE_CLIENT_SECRET }}",
            "subscriptionId": "${{ secrets.AZURE_SUBSCRIPTION_ID }}",
            "tenantId": "${{ secrets.AZURE_TENANT_ID }}"
          }

    - name: Terraform Init
      run: |
        terraform init \
          -backend-config="resource_group_name=rg-terraform-backend" \
          -backend-config="storage_account_name=tfbackend1749141799" \
          -backend-config="container_name=tfstate" \
          -backend-config="key=${{ github.event.inputs.environment }}-terraform.tfstate"
      working-directory: ./terraform

    - name: Terraform Plan Destroy
      id: plan
      run: |
        terraform plan -destroy -out=destroy.tfplan
        terraform show -no-color destroy.tfplan > destroy_plan.txt
      working-directory: ./terraform

    - name: Show Destroy Plan
      run: |
        echo "## üî• Terraform Destroy Plan for ${{ github.event.inputs.environment }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Resources to be destroyed:" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY
        head -50 terraform/destroy_plan.txt >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY

    - name: Wait for manual approval
      uses: trstringer/manual-approval@v1
      timeout-minutes: 30
      with:
        secret: ${{ github.TOKEN }}
        approvers: ${{ github.actor }}
        minimum-approvals: 1
        issue-title: "üî• Approve Terraform Destroy for ${{ github.event.inputs.environment }}"
        issue-body: |
          **Environment:** ${{ github.event.inputs.environment }}
          **Triggered by:** @${{ github.actor }}
          **Branch:** ${{ github.ref_name }}
          
          **‚ö†Ô∏è WARNING: This will permanently destroy infrastructure!**
          
          Please review the destroy plan carefully before approving.
          
          ### Resources to be destroyed:
          See the workflow run for the complete destroy plan.
          
          **To approve:** Comment "approve" on this issue
          **To deny:** Comment "deny" on this issue

    - name: Terraform Destroy
      run: |
        echo "üî• Starting infrastructure destruction..."
        terraform apply -auto-approve destroy.tfplan
        echo "‚úÖ Infrastructure destroyed successfully"
      working-directory: ./terraform

    - name: Cleanup State (Optional)
      if: success()
      run: |
        echo "‚úÖ Infrastructure destroyed successfully"
        echo "State file: ${{ github.event.inputs.environment }}-terraform.tfstate"
        # Uncomment the next lines if you want to delete the state file after destroy
        # az storage blob delete --account-name tfbackend1749141799 \
        #   --container-name tfstate \
        #   --name "${{ github.event.inputs.environment }}-terraform.tfstate"
      working-directory: ./terraform

    - name: Notify Success
      if: success() && env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: success
        text: |
          üî• Infrastructure destroyed successfully!
          Environment: ${{ github.event.inputs.environment }}
          Triggered by: ${{ github.actor }}
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

    - name: Notify Failure
      if: failure() && env.SLACK_WEBHOOK_URL != ''
      uses: 8398a7/action-slack@v3
      with:
        status: failure
        text: |
          ‚ùå Terraform destroy failed!
          Environment: ${{ github.event.inputs.environment }}
          Triggered by: ${{ github.actor }}
          Check the workflow logs for details.
      env:
        SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}